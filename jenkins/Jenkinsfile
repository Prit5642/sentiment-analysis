pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.12'  // Update to match your Python version
        PROJECT_NAME = 'sentiment-analysis'
        GITHUB_REPO = 'https://github.com/Prit5642/sentiment-analysis.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Clean workspace before checkout
                cleanWs()
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                bat '''
                    C:\\Python312\\python.exe -m pip install --upgrade pip
                    C:\\Python312\\Scripts\\pip.exe install -r requirements.txt
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                bat '''
                    C:\\Python312\\Scripts\\pip.exe install sniffio
                    mkdir tests\\reports
                    C:\\Python312\\python.exe -m pytest tests/ -v --cov=app --cov-report=xml --junitxml=tests/reports/test-results.xml
                '''
            }
            post {
                always {
                    junit 'tests/reports/*.xml'
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    bat '''
                        C:\\Python312\\Scripts\\pip.exe install pylint flake8 black
                        C:\\Python312\\Scripts\\black.exe app/ webapp/ dbapp/
                        C:\\Python312\\Scripts\\flake8.exe app/ webapp/ dbapp/ --max-line-length=100 || exit 0
                        C:\\Python312\\Scripts\\pylint.exe app/ webapp/ dbapp/ --output-format=parseable --reports=no > pylint-report.txt || exit 0
                    '''
                    recordIssues tools: [flake8(), pyLint(pattern: 'pylint-report.txt')]
                }
            }
        }
        
        stage('Build Validation') {
            steps {
                bat '''
                    C:\\Python312\\python.exe -c "from app.prediction import predictor; print('Model loaded successfully')"
                    C:\\Python312\\python.exe -c "from app.database import db_manager; db_manager.init_db(); print('Database initialized')"
                '''
            }
        }
        
        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    expression {
                        return env.BRANCH_NAME == null
                    }
                }
            }
            steps {
                bat '''
                    echo Deploying to staging environment...
                    rem Create staging deployment script
                    echo set FLASK_ENV=staging > deploy_staging.bat
                    echo start /B C:\\Python312\\python.exe run_webapp.py >> deploy_staging.bat
                    echo start /B C:\\Python312\\python.exe run_dbapp.py >> deploy_staging.bat
                    
                    rem Run deployment
                    call deploy_staging.bat
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    expression { 
                        return env.BRANCH_NAME == null || env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
                    }
                }
            }
            steps {
                bat '''
                    echo Deploying to production environment...
                    
                    rem Stop existing services
                    taskkill /F /FI "WINDOWTITLE eq sentiment-webapp" /T || exit 0
                    taskkill /F /FI "WINDOWTITLE eq sentiment-dbapp" /T || exit 0
                    
                    rem Create production deployment script
                    echo set FLASK_ENV=production > deploy_prod.bat
                    echo start "sentiment-webapp" /B C:\\Python312\\python.exe run_webapp.py >> deploy_prod.bat
                    echo start "sentiment-dbapp" /B C:\\Python312\\python.exe run_dbapp.py >> deploy_prod.bat
                    
                    rem Run deployment
                    call deploy_prod.bat
                    
                    echo Services restarted successfully
                '''
            }
        }
    }
    
    post {
        always {
            // Archive the test reports and logs
            archiveArtifacts artifacts: '**/test-results.xml, **/coverage.xml, security_report.html, safety_report.json, pylint-report.txt, **/*.log', allowEmptyArchive: true
            
            // Clean up workspace but keep logs
            bat '''
                if exist __pycache__ rmdir /s /q __pycache__
                if exist .pytest_cache rmdir /s /q .pytest_cache
            '''
        }
        success {
            echo 'Build succeeded! Sending notification...'
            // You can configure email settings in Jenkins
            emailext (
                subject: "✅ SUCCESS: ${env.JOB_NAME} - Build ${env.BUILD_NUMBER}",
                body: """
                    Project: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build URL: ${env.BUILD_URL}
                    
                    The build completed successfully.
                    
                    Check the artifacts and test reports in Jenkins for more details.
                """,
                to: 'pritshah096@gmail.com',  // Update with your email
                attachLog: true
            )
        }
        failure {
            echo 'Build failed! Sending notification...'
            emailext (
                subject: "❌ FAILED: ${env.JOB_NAME} - Build ${env.BUILD_NUMBER}",
                body: """
                    Project: ${env.JOB_NAME}
                    Build Number: ${env.BUILD_NUMBER}
                    Build URL: ${env.BUILD_URL}
                    
                    The build failed. Please check the console output and test reports.
                    
                    Console Output: ${env.BUILD_URL}console
                    Test Report: ${env.BUILD_URL}test_report/
                """,
                to: 'pritshah096@gmail.com',  // Update with your email
                attachLog: true
            )
        }
    }
}